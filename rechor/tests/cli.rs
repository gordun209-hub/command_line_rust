use assert_cmd::Command;
use predicates::prelude::*;
use std::fs;
// that says Ok part of the result type holds nothing
// and error parts can hold anything that implements the
// std::error::Error trait
type TestResult = Result<(), Box<dyn std::error::Error>>;

#[test]
//TODO learn how this works idk how to use it o em ci
fn dies_no_args() -> TestResult {
    // use ? instead of Result::unwrap to unpack an Ok value or propagate Err
    let mut cmd = Command::cargo_bin("rechor")?;
    cmd.assert()
        .failure()
        .stderr(predicate::str::contains("USAGE"));
    // we returning this
    Ok(())
}

#[test]
fn runs() -> TestResult {
    let mut cmd = Command::cargo_bin("rechor").unwrap();
    cmd.arg("hello").assert().success();
    Ok(())
}

#[test]
fn hello1() -> TestResult {
    // generated by script file
    // use fs read_to_string to read files
    let expected = fs::read_to_string("tests/expected/hello1.txt")?;
    // create command to run echor in the current crate
    let mut cmd = Command::cargo_bin("rechor")?;
    // run program
    cmd.arg("Hello there").assert().success().stdout(expected);
    Ok(())
}
#[test]
fn hello2() -> TestResult {
    let expected = fs::read_to_string("tests/expected/hello2.txt")?;
    let mut cmd = Command::cargo_bin("rechor")?;
    cmd.args(vec!["Hello", "there"])
        .assert()
        .success()
        .stdout(expected);
    Ok(())
}
// arguments are args and expected file return type TestResult
fn run(args: &[&str], expected_file: &str) -> TestResult {
    // try to read the contents of the expected_file into a string
    let expected = fs::read_to_string(expected_file)?;
    // attempt to run echor in the crate with the given args and assert stdout is expected value
    Command::cargo_bin("rechor")?
        .args(args)
        .assert()
        .success()
        .stdout(expected);
    // if all goes fine return Okke type else zaten ustten hata gelir np
    Ok(())
}
#[test]
fn hello3() -> TestResult {
    run(&["Hello", "there"], "tests/expected/hello2.txt")
}
// this fails  for some reason
#[test]
fn hello1_no_newline() -> TestResult {
    run(&["Hello there", "-n"], "tests/expected/hello1.n.txt")
}
